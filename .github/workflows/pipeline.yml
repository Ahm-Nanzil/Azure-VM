name: Push-to-azure

permissions:
  contents: write
  deployments: write

on:
  push:
    branches:
      - main

env:
  DEPLOYMENT_NAME: "PHP-App-$(date +'%Y%m%d-%H%M%S')"

jobs:
  deploy:
    name: Deploy to Azure VM and mark Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to latest version
        with:
          fetch-depth: 0

      # Pre-deployment health check
      - name: Pre-deployment health check
        uses: appleboy/ssh-action@v1.0.3
        continue-on-error: true
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "=== System Health Check ==="
            df -h | head -5
            free -m
            systemctl is-active apache2 || echo "Apache not running"

      # Start GitHub Deployment
      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production
          ref: ${{ github.ref }}

      # Create backup before deployment
      - name: Create backup of current deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            BACKUP_DIR="/var/backups/webapp/$(date +'%Y%m%d_%H%M%S')"
            sudo mkdir -p /var/backups/webapp
            if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html)" ]; then
              echo "Creating backup at $BACKUP_DIR"
              sudo cp -r /var/www/html "$BACKUP_DIR"
              echo "✅ Backup created successfully"
            else
              echo "No existing deployment to backup"
            fi
            
            # Keep only last 3 backups
            sudo find /var/backups/webapp -maxdepth 1 -type d -name "20*" | sort -r | tail -n +4 | sudo xargs rm -rf

      # Deploy files
      - name: Deploy files to Azure VM via SSH
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.Azure_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          TARGET: ${{ secrets.TARGET_DIR }}
          ARGS: "-avz --delete"
          EXCLUDE: ".git/, .github/, .gitignore, README.md, .env.example, tests/, node_modules/"

      # Enhanced server setup and post-deployment
      - name: Setup server and post-deployment tasks
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "=== Server Setup & Post-Deployment ==="
            
            # Install Apache if not present
            if [ ! -f /var/www/html/.apache_installed ]; then
              echo "Installing Apache..."
              sudo apt-get -y update
              sudo apt-get install -y apache2 php libapache2-mod-php
              sudo systemctl start apache2
              sudo systemctl enable apache2
              sudo touch /var/www/html/.apache_installed
              echo "✅ Apache installed and started"
            fi

            # Sync files to web root
            if [ "${{ secrets.TARGET_DIR }}" != "/var/www/html" ]; then
              echo "Syncing files to web root..."
              sudo rsync -av ${{ secrets.TARGET_DIR }}/ /var/www/html/
              echo "✅ Files synced to web root"
            fi

            # Set proper permissions
            sudo chown -R www-data:www-data /var/www/html/
            sudo chmod -R 755 /var/www/html/
            
            # Handle environment file
            if [ -f "/var/www/html/.env.example" ] && [ ! -f "/var/www/html/.env" ]; then
              sudo cp /var/www/html/.env.example /var/www/html/.env
              sudo chown www-data:www-data /var/www/html/.env
              echo "✅ Environment file created"
            fi

            # Install Composer dependencies if composer.json exists
            if [ -f "/var/www/html/composer.json" ]; then
              echo "Installing Composer dependencies..."
              cd /var/www/html
              if ! command -v composer &> /dev/null; then
                curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
              fi
              sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction
              echo "✅ Composer dependencies installed"
            fi

            # Restart Apache to ensure changes take effect
            sudo systemctl reload apache2
            echo "✅ Apache reloaded"

      # Post-deployment verification
      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "=== Deployment Verification ==="
            
            # Check if Apache is running
            if systemctl is-active --quiet apache2; then
              echo "✅ Apache is running"
            else
              echo "❌ Apache is not running"
              exit 1
            fi
            
            # Check if web root has files
            if [ "$(ls -A /var/www/html)" ]; then
              echo "✅ Web root contains files"
              ls -la /var/www/html/ | head -10
            else
              echo "❌ Web root is empty"
              exit 1
            fi
            
            # Basic HTTP check (if curl is available)
            if command -v curl &> /dev/null; then
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ || echo "000")
              if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
                echo "✅ Website responds with HTTP $HTTP_CODE"
              else
                echo "⚠️  Website responds with HTTP $HTTP_CODE"
              fi
            fi
            
            echo "=== Deployment completed successfully ==="

      # Mark deployment as successful
      - name: Mark GitHub Deployment as Successful
        uses: bobheadxi/deployments@v1
        if: success()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: production

      # Mark deployment as failed if any step fails
      - name: Mark GitHub Deployment as Failed
        uses: bobheadxi/deployments@v1
        if: failure()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: failure
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: production

      # Send notification on failure (optional)
      - name: Notify on deployment failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "❌ Deployment failed at $(date)"
            echo "Check GitHub Actions for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"