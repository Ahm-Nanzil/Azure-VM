name: Push-to-Azure

permissions:
  contents: write
  deployments: write

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy PHP App to Azure VM
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Pre-deployment health check
        uses: appleboy/ssh-action@v1.0.3
        continue-on-error: true
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "=== System Health Check ==="
            df -h | head -5
            free -m
            systemctl is-active apache2 || echo "❌ Apache not running"

      - name: 🚀 Start GitHub Deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production
          ref: ${{ github.ref }}

      - name: 📦 Create backup of current deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            BACKUP_DIR="/var/backups/webapp/$(date +'%Y%m%d_%H%M%S')"
            sudo mkdir -p /var/backups/webapp
            if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html)" ]; then
              echo "📦 Creating backup at $BACKUP_DIR"
              sudo cp -r /var/www/html "$BACKUP_DIR"
              echo "✅ Backup created"
            else
              echo "⚠️ No existing files to backup"
            fi
            sudo find /var/backups/webapp -maxdepth 1 -type d -name "20*" | sort -r | tail -n +4 | sudo xargs rm -rf

      - name: 📤 Deploy files via rsync over SSH
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.Azure_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          REMOTE_USER: ${{ secrets.USERNAME }}
          TARGET: ${{ secrets.TARGET_DIR }}
          ARGS: "-avz --delete --rsync-path='sudo rsync'"
          EXCLUDE: ".git/, .github/, .gitignore, README.md, .env.example, tests/, node_modules/, Email/tracking.json"


      - name: 🔧 Server setup and post-deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "=== Post-Deployment Tasks ==="
            APACHE_FLAG="/var/www/html/.apache_installed"

            # Apache setup
            if [ ! -f "$APACHE_FLAG" ]; then
              echo "Installing Apache..."
              sudo apt-get update -y
              sudo apt-get install -y apache2 php libapache2-mod-php curl unzip
              sudo systemctl enable apache2
              sudo systemctl start apache2
              sudo touch "$APACHE_FLAG"
              echo "✅ Apache installed"
            fi

            # Sync to /var/www/html
            if [ "${{ secrets.TARGET_DIR }}" != "/var/www/html" ]; then
              echo "Syncing to web root..."
              sudo rsync -av ${{ secrets.TARGET_DIR }}/ /var/www/html/
              echo "✅ Synced to /var/www/html"
            fi

            # Permissions
            sudo chown -R www-data:www-data /var/www/html/
            sudo chmod -R 755 /var/www/html/

            # Handle .env
            if [ -f "/var/www/html/.env.example" ] && [ ! -f "/var/www/html/.env" ]; then
              sudo cp /var/www/html/.env.example /var/www/html/.env
              sudo chown www-data:www-data /var/www/html/.env
              echo "✅ .env file created from example"
            fi

            # Composer dependencies
            if [ -f "/var/www/html/composer.json" ]; then
              echo "Installing Composer dependencies..."
              cd /var/www/html
              if ! command -v composer &> /dev/null; then
                curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
              fi
              sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction
              echo "✅ Composer install done"
            fi

            # Restart Apache
            sudo systemctl reload apache2
            echo "✅ Apache reloaded"

      - name: ✅ Deployment verification
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "=== Post-Deploy Verification ==="
            if systemctl is-active --quiet apache2; then
              echo "✅ Apache is running"
            else
              echo "❌ Apache is not running"
              exit 1
            fi

            if [ "$(ls -A /var/www/html)" ]; then
              echo "✅ Web root has files"
              ls -la /var/www/html/ | head -10
            else
              echo "❌ Web root is empty"
              exit 1
            fi

            if command -v curl &> /dev/null; then
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/ || echo "000")
              if [[ "$HTTP_CODE" =~ ^2|3 ]]; then
                echo "✅ HTTP status OK ($HTTP_CODE)"
              else
                echo "⚠️ HTTP status: $HTTP_CODE"
              fi
            fi

            echo "🎉 Deployment verified successfully"

      - name: 🎯 Mark GitHub Deployment as Successful
        if: success()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: production

      - name: ❌ Mark GitHub Deployment as Failed
        if: failure()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: failure
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: production

      - name: 🚨 Notify on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.Azure_SSH_KEY }}
          script: |
            echo "🚨 Deployment failed at $(date)"
            echo "Check GitHub Actions run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
